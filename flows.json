[
    {
        "id": "d445d260.887a2",
        "type": "tab",
        "label": "WA4YA Antenna Sequencer",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e20f16a4.627318",
        "type": "RelayJ2",
        "z": "d445d260.887a2",
        "name": "Relay J2",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "3523ad5c.eb6d32",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "vertical",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "3f7960a3.fd9d9"
            ]
        ]
    },
    {
        "id": "85c106e7.6370a8",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "vertical",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "dcd49b4aefbe7fae",
                "3f7960a3.fd9d9"
            ]
        ]
    },
    {
        "id": "830cd5fa.7f6fd8",
        "type": "RelayJ3",
        "z": "d445d260.887a2",
        "name": "Relay J3 fandipole",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "3f7960a3.fd9d9",
        "type": "RelayJ4",
        "z": "d445d260.887a2",
        "name": "Relay J4 Vertical",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "1330a95f.7753b7",
        "type": "RelayJ5",
        "z": "d445d260.887a2",
        "name": "Relay J5 deltaloop",
        "x": 1110,
        "y": 460,
        "wires": []
    },
    {
        "id": "a63eab5a.daf578",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "fandipole",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "bd7d886ef1b0b04d",
                "830cd5fa.7f6fd8"
            ]
        ]
    },
    {
        "id": "e0c647cc.665058",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "fandipole",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "830cd5fa.7f6fd8"
            ]
        ]
    },
    {
        "id": "5d7bc4cc.9c9cfc",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "deltaloop",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "798037a2f3587fd3"
            ]
        ]
    },
    {
        "id": "6ef75fc1.9684a",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "deltaloop",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "4dc7a9dd875e4f12"
            ]
        ]
    },
    {
        "id": "dcd49b4aefbe7fae",
        "type": "Invert",
        "z": "d445d260.887a2",
        "name": "Invert Vertical",
        "x": 620,
        "y": 260,
        "wires": [
            [
                "830cd5fa.7f6fd8",
                "4dc7a9dd875e4f12",
                "e20f16a4.627318"
            ]
        ]
    },
    {
        "id": "bd7d886ef1b0b04d",
        "type": "Invert",
        "z": "d445d260.887a2",
        "name": "Invert Fandipole",
        "x": 800,
        "y": 40,
        "wires": [
            [
                "e20f16a4.627318",
                "3f7960a3.fd9d9",
                "4dc7a9dd875e4f12"
            ]
        ]
    },
    {
        "id": "798037a2f3587fd3",
        "type": "Invert",
        "z": "d445d260.887a2",
        "name": "Invert detlaloop off",
        "x": 770,
        "y": 440,
        "wires": [
            [
                "1330a95f.7753b7",
                "3f7960a3.fd9d9",
                "830cd5fa.7f6fd8",
                "e20f16a4.627318",
                "8715db8e306e4877"
            ]
        ]
    },
    {
        "id": "4dc7a9dd875e4f12",
        "type": "Invert",
        "z": "d445d260.887a2",
        "name": "Invert deltaloop on",
        "x": 810,
        "y": 520,
        "wires": [
            [
                "1330a95f.7753b7",
                "45a2f9f7d51d1cfb"
            ]
        ]
    },
    {
        "id": "cron_plus_node",
        "type": "cronplus",
        "z": "d445d260.887a2",
        "name": "Antenna Sequencer Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "t59",
                "topic": "t59",
                "payloadType": "str",
                "payload": "t59",
                "expressionType": "cron",
                "expression": "59 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "t14",
                "topic": "t14",
                "payloadType": "str",
                "payload": "t14",
                "expressionType": "cron",
                "expression": "14 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "t29",
                "topic": "t29",
                "payloadType": "str",
                "payload": "t29",
                "expressionType": "cron",
                "expression": "29 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "t44",
                "topic": "t44",
                "payloadType": "str",
                "payload": "t44",
                "expressionType": "cron",
                "expression": "44 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 150,
        "y": 260,
        "wires": [
            [
                "sequencer_function"
            ]
        ]
    },
    {
        "id": "sequencer_function",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Antenna Sequencer",
        "func": "// msg.payload is t14/t29/t44/t59\nconst tick = msg.payload;\n\nconst txMode = (flow.get('txMode') || 'even').toString();\nconst txA = (flow.get('txAntenna') || 'deltaloop').toString();\nlet rxA = (flow.get('rxAntenna') || 'deltaloop').toString();\nrxA = rxA.toString();\nconst antennas = ['vertical', 'fandipole', 'deltaloop'];\nlet action = null;\nif (txMode === 'even') {\n    if (tick === 't59' || tick === 't29') action = 'toTX';\n    else if (tick === 't14' || tick === 't44') action = 'toRX';\n} else {\n    if (tick === 't14' || tick === 't44') action = 'toTX';\n    else if (tick === 't29' || tick === 't59') action = 'toRX';\n}\nconst out = [];\nif (action === 'toTX') {\n    if (txA === 'vertical') out.push({payload:true, topic:'vertical'});\n    if (txA === 'fandipole') out.push({payload:true, topic:'fandipole'});\n    if (txA === 'deltaloop') out.push({payload:true, topic:'deltaloop'});\n} else if (action === 'toRX') {\n    if (rxA === 'vertical') out.push({payload:true, topic:'vertical'});\n    if (rxA === 'fandipole') out.push({payload:true, topic:'fandipole'});\n    if (rxA === 'deltaloop') out.push({payload:true, topic:'deltaloop'});\n}\nreturn out;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "invert_vertical",
                "invert_fandipole",
                "invert_deltaloop",
                "e4d2b3f22418a1cf"
            ]
        ]
    },
    {
        "id": "invert_vertical",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Vertical Output",
        "func": "// Only pass messages for vertical\nif(msg.topic === 'vertical'){\n    return [{payload: false}, {payload: true}]; // first = Invert, second = Relay\n} else { return null; }",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "e20f16a4.627318",
                "830cd5fa.7f6fd8"
            ],
            [
                "3f7960a3.fd9d9",
                "1330a95f.7753b7"
            ]
        ]
    },
    {
        "id": "invert_fandipole",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Fandipole Output",
        "func": "// Only pass messages for fandipole\nif(msg.topic === 'fandipole'){\n    return [{payload: false}, {payload: true}];\n} else { return null; }",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "de6c138b7ee39a6a",
                "e20f16a4.627318",
                "3f7960a3.fd9d9",
                "1330a95f.7753b7"
            ],
            [
                "830cd5fa.7f6fd8",
                "ab3853e957256d2d"
            ]
        ]
    },
    {
        "id": "invert_deltaloop",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "DeltaLoop Output",
        "func": "// Only pass messages for deltaloop\nnode.log(\"deltaloop: \" + msg);\nif(msg.topic === 'deltaloop'){\n   \n    return [{payload: false}, {payload: true}, {payload: msg.payload}];\n} else { return null; }",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "3f7960a3.fd9d9",
                "1330a95f.7753b7",
                "830cd5fa.7f6fd8",
                "e20f16a4.627318"
            ],
            [
                "4dc7a9dd875e4f12",
                "1330a95f.7753b7",
                "8947799b6001c05a"
            ],
            [
                "9afd65f802dc1ad3"
            ]
        ]
    },
    {
        "id": "e4d2b3f22418a1cf",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "2c338e1e4806ba94",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set RX = vertical",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "vertical",
        "payloadType": "str",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "ddfce09080e724f2"
            ]
        ]
    },
    {
        "id": "cce2eb891f141efe",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set RX = fandipole",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "fandipole",
        "payloadType": "str",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "ddfce09080e724f2"
            ]
        ]
    },
    {
        "id": "8a803f047be41daa",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set RX = deltaloop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "deltaloop",
        "payloadType": "str",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "ddfce09080e724f2"
            ]
        ]
    },
    {
        "id": "ddfce09080e724f2",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Store RX Antenna",
        "func": "flow.set('rxAntenna', msg.payload);\nnode.status({fill:\"green\", shape:\"dot\", text:\"RX=\"+msg.payload});\nreturn {payload:\"RX antenna set to \"+msg.payload};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            [
                "69cadbfd426e3327"
            ]
        ]
    },
    {
        "id": "9c4600b6e8e26fe7",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set TX = vertical",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "vertical",
        "payloadType": "str",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "dd2287142a363414"
            ]
        ]
    },
    {
        "id": "9c3f3fd16725fc37",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set TX = fandipole",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "fandipole",
        "payloadType": "str",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "dd2287142a363414"
            ]
        ]
    },
    {
        "id": "6eb1209d25ab88e5",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set TX = deltaloop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "deltaloop",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "dd2287142a363414"
            ]
        ]
    },
    {
        "id": "dd2287142a363414",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Store TX Antenna",
        "func": "flow.set('txAntenna', msg.payload);\nnode.status({fill:\"blue\", shape:\"dot\", text:\"TX=\"+msg.payload});\nreturn {payload:\"TX antenna set to \"+msg.payload};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "69cadbfd426e3327"
            ]
        ]
    },
    {
        "id": "2989f9dd2c1edfe2",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set Mode = even",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "even",
        "payloadType": "str",
        "x": 100,
        "y": 820,
        "wires": [
            [
                "3d417510ee22c549"
            ]
        ]
    },
    {
        "id": "a9e62920f9ea88d7",
        "type": "inject",
        "z": "d445d260.887a2",
        "name": "Set Mode = odd",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "odd",
        "payloadType": "str",
        "x": 100,
        "y": 860,
        "wires": [
            [
                "3d417510ee22c549"
            ]
        ]
    },
    {
        "id": "3d417510ee22c549",
        "type": "function",
        "z": "d445d260.887a2",
        "name": "Store TX Interval Mode",
        "func": "flow.set('txMode', msg.payload);\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"Mode=\"+msg.payload});\nreturn {payload:\"TX interval mode set to \"+msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "69cadbfd426e3327"
            ]
        ]
    },
    {
        "id": "69cadbfd426e3327",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "Debug Settings",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 680,
        "wires": []
    },
    {
        "id": "de6c138b7ee39a6a",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "9afd65f802dc1ad3",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "8715db8e306e4877",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 380,
        "wires": []
    },
    {
        "id": "45a2f9f7d51d1cfb",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 540,
        "wires": []
    },
    {
        "id": "8947799b6001c05a",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "ab3853e957256d2d",
        "type": "debug",
        "z": "d445d260.887a2",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 20,
        "wires": []
    }
]